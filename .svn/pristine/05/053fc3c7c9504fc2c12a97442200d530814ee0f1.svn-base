using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Windows.Forms;
using SpaceInvaders.Resources;
using System.IO;
using System.Media;
using System.ComponentModel;
using System.Windows.Media;

namespace SpaceInvaders
{
    class Game
    {

        #region GameObjects management
        /// <summary>
        /// Set of all game objects currently in the game
        /// </summary>
        public HashSet<GameObject> gameObjects = new HashSet<GameObject>();

        /// <summary>
        /// Set of new game objects scheduled for addition to the game
        /// </summary>
        private HashSet<GameObject> pendingNewGameObjects = new HashSet<GameObject>();

        /// <summary>
        /// Schedule a new object for addition in the game.
        /// The new object will be added at the beginning of the next update loop
        /// </summary>
        /// <param name="gameObject">object to add</param>
        public void AddNewGameObject(GameObject gameObject)
        {
            pendingNewGameObjects.Add(gameObject);
        }
        #endregion

        #region game technical elements
        /// <summary>
        /// Size of the game area
        /// </summary>
        public Size gameSize;

        /// <summary>
        /// State of the keyboard
        /// </summary>
        public HashSet<Keys> keyPressed = new HashSet<Keys>();

        /// <summary>
        /// Main randomizer for the game and the game components
        /// </summary>
        public Random randomizer;

        /// <summary>
        /// Music AudioPlayer 
        /// </summary>
        public MediaPlayer audioPlayer;

        /// <summary>
        /// The dynamic background of the game
        /// </summary>
        private Background background = new Background();

        /// <summary>
        /// The enemyblock of the game
        /// </summary>
        private EnemyBlock enemyBlock;

        /// <summary>
        /// Tells if the game is over
        /// </summary>
        private bool end = false;

        /// <summary>
        /// Tells if the game is on break
        /// </summary>
        private bool pause = false;

        #endregion

        #region static fields (helpers)

        /// <summary>
        /// Singleton for easy access
        /// </summary>
        public static Game game { get; private set; }

        /// <summary>
        /// A shared black brush
        /// </summary>
        private static System.Drawing.Brush blackBrush = new SolidBrush(System.Drawing.Color.Black);

        /// <summary>
        /// A shared simple font
        /// </summary>
        private static Font defaultFont = new Font("Times New Roman", 24, FontStyle.Bold, GraphicsUnit.Pixel);

        /// <summary>
        /// The player in the current game
        /// </summary>
        public static PlayerShip player;
        #endregion


        #region constructors
        /// <summary>
        /// Singleton constructor
        /// </summary>
        /// <param name="gameSize">Size of the game area</param>
        /// 
        /// <returns></returns>
        public static Game CreateGame(Size gameSize)
        {
            if (game == null)
                game = new Game(gameSize);
                game.InitGame();
            return game;
        }

        /// <summary>
        /// Private constructor
        /// </summary>
        /// <param name="gameSize">Size of the game area</param>
        private Game(Size gameSize)
        {
            this.gameSize = gameSize;
        }

        #endregion

        #region methods

        /// <summary>
        /// Force a given key to be ignored in following updates until the user
        /// explicitily retype it or the system autofires it again.
        /// </summary>
        /// <param name="key">key to ignore</param>
        public void ReleaseKey(Keys key)
        {
            keyPressed.Remove(key);
        }


        /// <summary>
        /// Draw the whole game
        /// </summary>
        /// <param name="g">Graphics to draw in</param>
        public void Draw(Graphics g)
        {
            background.Draw(g);
            foreach (GameObject gameObject in gameObjects)
                gameObject.Draw(this, g);
            enemyBlock.Draw(this, g);
            CheckEndGame(g);
            if (pause) { DrawText(g, "Pause", new Rectangle(0, 0, gameSize.Width, gameSize.Height)); }
            DrawText(g, "Vies : "+player.PV, new Rectangle(0, (gameSize.Height/2)-player.GetImage().Height, gameSize.Width/4, gameSize.Height));
        }

        /// <summary>
        /// Draws text according to the rectangle as parameter
        /// </summary>
        private void DrawText(Graphics g,string text,Rectangle r)
        {
            StringFormat sf = new StringFormat();
            sf.LineAlignment = StringAlignment.Center;
            sf.Alignment = StringAlignment.Center;
            g.DrawString(text, new Font("Arial", 24, FontStyle.Bold), new SolidBrush(System.Drawing.Color.White), r, sf);
        }

        /// <summary>
        /// Checks the endgame
        /// </summary>
        public void CheckEndGame(Graphics g)
        {
            string winner = "";
            if (!enemyBlock.IsAlive()){winner = "Victoure de la fédération, vous avez gagné !";}
            if (enemyBlock.IsWinner()){winner = "Victoire des rebelles, vous avez perdu !";}
            if (winner != "")
            {
                DrawText(g,winner, new Rectangle(0, 0, gameSize.Width, gameSize.Height));
                end = true;
                foreach (GameObject gameObject in gameObjects) { if (gameObject is EnemyShip) { EnemyShip enemy = (EnemyShip)gameObject; enemy.StopShootTimer(); } }
            }
        }

        /// <summary>
        /// Tells if the game is on pause or on end
        /// </summary>
        public bool IsInactive()
        {
            if(pause==true || end == true) { return true; }
            return false;
        }

        /// <summary>
        /// Updates the game and every game components
        /// </summary>
        public void Update(double deltaT)
        {
            background.Move(deltaT);
            if (keyPressed.Contains(Keys.P)) { pause = !pause; ReleaseKey(Keys.P); }
            if(end && keyPressed.Contains(Keys.Space)) { audioPlayer.Close(); gameObjects = new HashSet<GameObject>(); InitGame(); ReleaseKey(Keys.Space); }
            if (!end && !pause){
                // add new game objects
                gameObjects.UnionWith(pendingNewGameObjects);
                pendingNewGameObjects.Clear();

                // update each game object
                foreach (GameObject gameObject in gameObjects){gameObject.Update(this, deltaT);}
                enemyBlock.Update(this, deltaT);

                // remove dead objects
                gameObjects.RemoveWhere(gameObject => !gameObject.IsAlive());
            }
            audioPlayer.Play();
        }

        /// <summary>
        /// Initiates the game
        /// </summary>
        public void InitGame()
        {
            end = false; pause = false; randomizer = new Random();
            // create new PlayerShip
            player = new PlayerShip();
            // add it to the game
            AddNewGameObject(player);

            //Bunkers
            for (int i = 0; i < 3; i++)
            {
                AddNewGameObject(new Bunker(new Vecteur2D((i + 1) * gameSize.Width / 4, gameSize.Height / 1.5)));
            }

            //enemy block
            enemyBlock = new EnemyBlock(new Vecteur2D(1, 1), new Size((int)(gameSize.Width*0.7), gameSize.Height / 2), 5);

            audioPlayer = new MediaPlayer();
            audioPlayer.Open(new Uri(Path.Combine(Environment.CurrentDirectory, @"..\..\Resources\Music.wav")));

        }

        /// <summary>
        /// Tells if object is "out" of the game window
        /// </summary>
        public bool IsOutOfBounds(Vecteur2D v,Size s)
        {
            //Check width
            if (v.X + s.Width > gameSize.Width || v.X < 0){return true;}
            //Check height
            if (v.Y + s.Height > gameSize.Height || v.Y < 0){return true;}
            return false;
        }

        /// <summary>
        /// Checks collisions with a missile
        /// </summary>
        public void CheckCollisions(Missile m)
        {
            foreach (GameObject g2 in gameObjects)
            {
                if (!m.Equals(g2))
                {
                    m.CheckCollisions(g2); 
                }
            }
        }
        #endregion
    }
}
